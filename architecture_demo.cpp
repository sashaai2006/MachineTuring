#include "MT.h"
#include "TuringEntities.h"
#include <iostream>
#include <string>
#include <vector>

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∑–æ–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 */
void DemonstrateArchitecture() {
    std::cout << "üè† === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ ===" << std::endl << std::endl;
    
    std::cout << "üîß –°–æ–∑–¥–∞—ë–º –º–∞—à–∏–Ω—É –¢—å—é—Ä–∏–Ω–≥–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:" << std::endl;
    MachineTuring<std::string, char> tm(' ', "INIT");
    
    std::cout << std::endl << "üîç 1. TransitionManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:" << std::endl;
    tm.AddRule("INIT", 'A', "PROCESS", 'X', Direction::RIGHT);
    tm.AddRule("PROCESS", 'B', "PROCESS", 'Y', Direction::RIGHT);
    tm.AddRule("PROCESS", ' ', "FINISH", 'Z', Direction::STAY);
    std::cout << "   - –î–æ–±–∞–≤–ª–µ–Ω–æ 3 –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞" << std::endl;
    
    std::cout << std::endl << "üìç 2. StateManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏:" << std::endl;
    tm.AddFinalState("FINISH");
    std::cout << "   - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " << tm.GetCurrentState() << std::endl;
    std::cout << "   - –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: FINISH" << std::endl;
    
    std::cout << std::endl << "üìú 3. TuringTape (LazySeq) - –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ª–µ–Ω—Ç–∞:" << std::endl;
    std::vector<char> input = {'A', 'B', 'B', 'A'};
    tm.SetInput(input);
    std::cout << "   - –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –ª–µ–Ω—Ç—É —á–µ—Ä–µ–∑ LazySeq" << std::endl;
    std::cout << "   - –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª: '" << tm.GetBlankSymbol() << "'" << std::endl;
    
    std::cout << std::endl << "üîÑ 4. HeadManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≤–∫–æ–π:" << std::endl;
    std::cout << "   - –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: " << tm.GetHeadPosition() << std::endl;
    std::cout << "   - –°–∏–º–≤–æ–ª –ø–æ–¥ –≥–æ–ª–æ–≤–∫–æ–π: '" << tm.ReadCurrentSymbol() << "'" << std::endl;
    
    std::cout << std::endl << "üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:" << std::endl;
    tm.PrintState(std::cout, 10);
    
    std::cout << std::endl << "‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–∫–æ–π:" << std::endl;
    tm.SetDebugMode(true);
    
    bool success = tm.Run();
    
    std::cout << std::endl << "üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" << std::endl;
    tm.PrintStatistics();
    
    if (success) {
        std::cout << std::endl << "üéâ –ú–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        std::cout << "–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã:" << std::endl;
        tm.PrintState(std::cout, 8);
    }
    
    std::cout << std::endl;
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ LazySeq –Ω–∞ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
 */
void DemonstrateLazySeqEfficiency() {
    std::cout << "üöÄ === –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å LazySeq: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–∏–ª–ª–∏–æ–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º ===" << std::endl << std::endl;
    
    MachineTuring<std::string, char> tm('.', "JUMP");
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä—ã–≥–∞–µ—Ç –Ω–∞ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    tm.AddRule("JUMP", '.', "FINAL", 'V', Direction::STAY);
    tm.AddFinalState("FINAL");
    
    // –ú–∞–ª–µ–Ω—å–∫–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    std::vector<char> input = {'S', 'M', 'A', 'L', 'L'};
    tm.SetInput(input);
    
    std::cout << "üìã –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:" << std::endl;
    std::cout << "   –ü–æ–∑–∏—Ü–∏–∏ 0-4: ";
    for (int i = 0; i < 5; ++i) {
        std::cout << tm.GetSymbolAt(i) << " ";
    }
    std::cout << std::endl;
    
    std::cout << std::endl << "üåå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º —á–µ—Ä–µ–∑ LazySeq:" << std::endl;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - LazySeq –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ö –ª–µ–Ω–∏–≤–æ
    std::vector<int> distant_positions = {100, 1000, 10000, 100000, 1000000};
    
    auto start_time = std::chrono::high_resolution_clock::now();
    
    for (int pos : distant_positions) {
        char symbol = tm.GetSymbolAt(pos);
        std::cout << "   –ü–æ–∑–∏—Ü–∏—è " << pos << ": '" << symbol << "' (LazySeq –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É)" << std::endl;
    }
    
    auto end_time = std::chrono::high_resolution_clock::now();
    auto access_time = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);
    
    std::cout << "   ‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º: " << access_time.count() << " –º–∫—Å" << std::endl;
    
    std::cout << std::endl << "üêà –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:" << std::endl;
    for (int pos = -1; pos >= -5; --pos) {
        char symbol = tm.GetSymbolAt(pos);
        std::cout << "   –ü–æ–∑–∏—Ü–∏—è " << pos << ": '" << symbol << "' (–ª–µ–≤–∞—è —á–∞—Å—Ç—å –ª–µ–Ω—Ç—ã)" << std::endl;
    }
    
    std::cout << std::endl << "üèÉ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—à–∏–Ω—É:" << std::endl;
    bool success = tm.Run();
    
    if (success) {
        std::cout << "‚úÖ –ú–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É!" << std::endl;
        tm.PrintStatistics();
    }
    
    std::cout << std::endl;
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –Ω–∞ LazySeq
 */
void DemonstrateLazySeqModifications() {
    std::cout << "üîç === –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ LazySeq ===" << std::endl << std::endl;
    
    MachineTuring<std::string, char> tm('-', "MODIFY");
    
    // –ú–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–µ–Ω—Ç–µ
    tm.AddRule("MODIFY", 'A', "MODIFY", '1', Direction::RIGHT);
    tm.AddRule("MODIFY", 'B', "MODIFY", '2', Direction::RIGHT);
    tm.AddRule("MODIFY", 'C', "MODIFY", '3', Direction::RIGHT);
    tm.AddRule("MODIFY", '-', "JUMP_BACK", '*', Direction::LEFT);  // –û—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –∏ –ø–æ–π–¥—ë–º –Ω–∞–∑–∞–¥
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
    tm.AddRule("JUMP_BACK", '1', "JUMP_BACK", '1', Direction::LEFT);
    tm.AddRule("JUMP_BACK", '2', "JUMP_BACK", '2', Direction::LEFT);
    tm.AddRule("JUMP_BACK", '3', "JUMP_BACK", '3', Direction::LEFT);
    tm.AddRule("JUMP_BACK", '-', "FINAL", '!', Direction::STAY);
    
    tm.AddFinalState("FINAL");
    
    std::vector<char> input = {'A', 'B', 'C', 'A', 'B'};
    tm.SetInput(input);
    
    std::cout << "üìã –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–µ–Ω—Ç–µ: ";
    for (char c : input) std::cout << c << " ";
    std::cout << std::endl;
    
    std::cout << std::endl << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ LazySeq –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:" << std::endl;
    
    bool success = tm.Run();
    
    if (success) {
        std::cout << std::endl << "üéâ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!" << std::endl;
        std::cout << "–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã:" << std::endl;
        tm.PrintState();
        
        std::cout << std::endl << "üîç –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–µ–Ω—Ç–µ: ";
        auto result = tm.GetTapeSegment(0, input.size() + 1);
        for (char c : result) std::cout << c << " ";
        std::cout << std::endl;
        
        tm.PrintStatistics();
    }
    
    std::cout << std::endl;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
int main() {
    std::cout << "üè† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞" << std::endl;
    std::cout << "================================================" << std::endl;
    std::cout << "üìÖ –û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ LazySequence —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏" << std::endl;
    std::cout << std::endl;
    
    try {
        DemonstrateArchitecture();
        DemonstrateLazySeqEfficiency();
        DemonstrateLazySeqModifications();
        
        std::cout << "üìö === –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ===" << std::endl;
        std::cout << std::endl;
        std::cout << "1. ü§ù –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (Separation of Concerns):" << std::endl;
        std::cout << "   ‚Ä¢ TransitionManager: —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤" << std::endl;
        std::cout << "   ‚Ä¢ StateManager: —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏" << std::endl;
        std::cout << "   ‚Ä¢ TuringTape: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ —Å –ª–µ–Ω—Ç–æ–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ LazySeq)" << std::endl;
        std::cout << "   ‚Ä¢ HeadManager: —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≤–∫–æ–π" << std::endl;
        std::cout << std::endl;
        
        std::cout << "2. üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ LazySeq:" << std::endl;
        std::cout << "   ‚Ä¢ –õ–µ–Ω–∏–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ª–µ–Ω—Ç–µ" << std::endl;
        std::cout << "   ‚Ä¢ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Ä–∞–Ω–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤" << std::endl;
        std::cout << "   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" << std::endl;
        std::cout << std::endl;
        
        std::cout << "3. ‚öôÔ∏è –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å:" << std::endl;
        std::cout << "   ‚Ä¢ –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ" << std::endl;
        std::cout << "   ‚Ä¢ –õ–µ–≥–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏" << std::endl;
        std::cout << "   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤" << std::endl;
        
        std::cout << std::endl << "‚ú® –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
