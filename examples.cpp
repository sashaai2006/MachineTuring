#include "MT.h"
#include <iostream>
#include <vector>
#include <string>

/**
 * –ü—Ä–∏–º–µ—Ä 1: –ú–∞—à–∏–Ω–∞ –¢—å—é—Ä–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LazySeq –¥–ª—è –ª–µ–Ω—Ç—ã
 */
void ExampleBinaryInverter() {
    std::cout << "=== –ü—Ä–∏–º–µ—Ä 1: –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ LazySeq) ===" << std::endl;
    
    // –°–æ–∑–¥–∞—ë–º –º–∞—à–∏–Ω—É —Å –ø—É—Å—Ç—ã–º —Å–∏–º–≤–æ–ª–æ–º ' ' –∏ –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "START"
    MachineTuring<std::string, char> tm(' ', "START");
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
    // TransitionManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    tm.AddRule("START", '0', "START", '1', Direction::RIGHT);  // 0 -> 1, –¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ
    tm.AddRule("START", '1', "START", '0', Direction::RIGHT);  // 1 -> 0, –¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ
    tm.AddRule("START", ' ', "FINAL", ' ', Direction::STAY);   // –ü—Ä–∏ –ø—É—Å—Ç–æ–º —Å–∏–º–≤–æ–ª–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    
    // StateManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    tm.AddFinalState("FINAL");
    
    // TuringTape (–Ω–∞ –æ—Å–Ω–æ–≤–µ LazySeq) —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–µ–Ω—Ç–æ–π
    std::vector<char> input = {'1', '0', '1', '1', '0', '0', '1'};
    tm.SetInput(input);
    
    std::cout << "–í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: ";
    for (char c : input) std::cout << c;
    std::cout << std::endl << std::endl;
    
    std::cout << "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" << std::endl;
    tm.PrintState();
    std::cout << std::endl;
    
    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤
    tm.SetDebugMode(true);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º 3 —à–∞–≥–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
    std::cout << "–ü–µ—Ä–≤—ã–µ 3 —à–∞–≥–∞ (—Å –æ—Ç–ª–∞–¥–∫–æ–π):" << std::endl;
    for (int i = 0; i < 3 && tm.Step(); ++i) {
        // –û—Ç–ª–∞–¥–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –∏ –¥–æ–≤—ã–ø–æ–ª–Ω—è–µ–º
    tm.SetDebugMode(false);
    bool success = tm.Run();
    
    std::cout << std::endl << "–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" << std::endl;
    tm.PrintState();
    
    std::cout << std::endl << "–†–µ–∑—É–ª—å—Ç–∞—Ç: ";
    if (success) {
        std::cout << "–ú–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        
        auto result_tape = tm.GetTapeSegment(0, input.size());
        std::cout << "–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞: ";
        for (char c : result_tape) std::cout << c;
        std::cout << std::endl;
    } else {
        std::cout << "–ú–∞—à–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–µ –≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏" << std::endl;
    }
    
    tm.PrintStatistics();
    std::cout << std::endl;
}

/**
 * –ü—Ä–∏–º–µ—Ä 2: –ú–∞—à–∏–Ω–∞ –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –≤ —É–Ω–∞—Ä–Ω–æ–º –∫–æ–¥–µ
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ª–µ–Ω—Ç–æ–π (LazySeq)
 */
void ExampleUnaryAddition() {
    std::cout << "=== –ü—Ä–∏–º–µ—Ä 2: –°–ª–æ–∂–µ–Ω–∏–µ –≤ —É–Ω–∞—Ä–Ω–æ–º –∫–æ–¥–µ ===" << std::endl;
    
    MachineTuring<std::string, char> tm(' ', "START");
    
    // –õ–æ–≥–∏–∫–∞: –Ω–∞—Ö–æ–¥–∏–º '+', –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ '1', –∏–¥—ë–º –≤ –∫–æ–Ω–µ—Ü –∏ —Å—Ç–∏—Ä–∞–µ–º –æ–¥–Ω—É '1'
    tm.AddRule("START", '1', "START", '1', Direction::RIGHT);      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã
    tm.AddRule("START", '+', "FIND_END", '1', Direction::RIGHT);   // –ó–∞–º–µ–Ω—è–µ–º '+' –Ω–∞ '1'
    
    tm.AddRule("FIND_END", '1', "FIND_END", '1', Direction::RIGHT);  // –ò—â–µ–º –∫–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞
    tm.AddRule("FIND_END", ' ', "DELETE_ONE", ' ', Direction::LEFT);  // –ù–∞—à–ª–∏ –∫–æ–Ω–µ—Ü
    
    tm.AddRule("DELETE_ONE", '1', "FINAL", ' ', Direction::STAY);   // –£–¥–∞–ª—è–µ–º –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É
    
    tm.AddFinalState("FINAL");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º: 3 + 2 = 5 ("111+11" -> "11111")
    std::vector<char> input = {'1', '1', '1', '+', '1', '1'};
    tm.SetInput(input);
    
    std::cout << "–í—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ";
    for (char c : input) std::cout << c;
    std::cout << " (—ç—Ç–æ 3 + 2 –≤ —É–Ω–∞—Ä–Ω–æ–º –∫–æ–¥–µ)" << std::endl;
    
    std::cout << "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" << std::endl;
    tm.PrintState();
    
    bool success = tm.Run();
    
    std::cout << std::endl << "–ö–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" << std::endl;
    tm.PrintState();
    
    if (success) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã
        auto result = tm.GetTapeSegment(0, 10);
        std::cout << std::endl << "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ª–µ–Ω—Ç–µ: ";
        
        int count = 0;
        for (char c : result) {
            if (c == '1') {
                count++;
                std::cout << c;
            } else if (c == ' ') {
                break;
            }
        }
        
        std::cout << " (= " << count << " –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –≤–∏–¥–µ)" << std::endl;
    }
    
    tm.PrintStatistics();
    std::cout << std::endl;
}

/**
 * –ü—Ä–∏–º–µ—Ä 3: –ú–∞—à–∏–Ω–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å LazySeq
 */
void ExampleSimplePalindrome() {
    std::cout << "=== –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞ ===" << std::endl;
    
    MachineTuring<std::string, char> tm(' ', "START");
    
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ "aba", "abba"
    
    // –ò—â–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    tm.AddRule("START", 'a', "MOVE_RIGHT", 'a', Direction::RIGHT);
    tm.AddRule("START", 'b', "MOVE_RIGHT", 'b', Direction::RIGHT);
    tm.AddRule("START", ' ', "CHECK_PALINDROME", ' ', Direction::LEFT);
    
    tm.AddRule("MOVE_RIGHT", 'a', "MOVE_RIGHT", 'a', Direction::RIGHT);
    tm.AddRule("MOVE_RIGHT", 'b', "MOVE_RIGHT", 'b', Direction::RIGHT);
    tm.AddRule("MOVE_RIGHT", ' ', "CHECK_PALINDROME", ' ', Direction::LEFT);
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É
    tm.AddRule("CHECK_PALINDROME", 'a', "ACCEPT", 'a', Direction::STAY);
    tm.AddRule("CHECK_PALINDROME", 'b', "ACCEPT", 'b', Direction::STAY);
    
    tm.AddFinalState("ACCEPT");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    std::vector<std::vector<char>> test_cases = {
        {'a', 'b', 'a'},
        {'a', 'b', 'b', 'a'},
        {'a'},
        {'a', 'b', 'c'}
    };
    
    for (const auto& test_input : test_cases) {
        tm.Reset();  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—à–∏–Ω—É
        tm.SetInput(test_input);
        
        std::cout << "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: ";
        for (char c : test_input) std::cout << c;
        std::cout << std::endl;
        
        bool success = tm.Run();
        std::cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç: " << (success ? "–ü—Ä–∏–Ω—è—Ç–∞" : "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞");
        std::cout << " (—à–∞–≥–æ–≤: " << tm.GetStepCount() << ")" << std::endl;
    }
    
    std::cout << std::endl;
}

/**
 * –ü—Ä–∏–º–µ—Ä 4: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ LazySeq
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ LazySeq –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
 */
void ExampleLazySeqEfficiency() {
    std::cout << "=== –ü—Ä–∏–º–µ—Ä 4: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å LazySeq (–¥–ª–∏–Ω–Ω–∞—è –ª–µ–Ω—Ç–∞) ===" << std::endl;
    
    MachineTuring<std::string, char> tm('_', "START");
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å—Ç–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ –ø–æ–∑–∏—Ü–∏–∏ 1000
    tm.AddRule("START", '_', "MOVING", 'X', Direction::RIGHT);
    tm.AddRule("MOVING", '_', "MOVING", '_', Direction::RIGHT);
    
    tm.AddFinalState("FINAL");
    
    // –ú–∞–ª–µ–Ω—å–∫–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–≤–æ–¥
    std::vector<char> input = {'S', 'T', 'A', 'R', 'T'};
    tm.SetInput(input);
    
    std::cout << "–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ";
    for (char c : input) std::cout << c;
    std::cout << std::endl;
    
    std::cout << "–ü–æ–∑–∏—Ü–∏—è –≥–æ–ª–æ–≤–∫–∏: " << tm.GetHeadPosition() << std::endl;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º 50 —à–∞–≥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    for (int i = 0; i < 50 && tm.Step(); ++i) {
        // –ú–æ–ª—á–∞–ª–∏–≤–æ –≤—ã–ø–æ–ª–Ω—è–µ–º
    }
    
    std::cout << "–ü–æ—Å–ª–µ 50 —à–∞–≥–æ–≤:" << std::endl;
    std::cout << "–ü–æ–∑–∏—Ü–∏—è –≥–æ–ª–æ–≤–∫–∏: " << tm.GetHeadPosition() << std::endl;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–Ω—Ç—É –≤–æ–∫—Ä—É–≥ –≥–æ–ª–æ–≤–∫–∏
    tm.PrintState(std::cout, 10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–∞–ª—ë–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    std::cout << "–°–∏–º–≤–æ–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 1000: " << tm.GetSymbolAt(1000) << std::endl;
    std::cout << "–°–∏–º–≤–æ–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ -50: " << tm.GetSymbolAt(-50) << std::endl;
    
    tm.PrintStatistics();
    std::cout << std::endl;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
int main() {
    std::cout << "–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ LazySeq" << std::endl;
    std::cout << "=================================================================" << std::endl << std::endl;
    
    try {
        ExampleBinaryInverter();
        ExampleUnaryAddition();
        ExampleSimplePalindrome();
        ExampleLazySeqEfficiency();
        
        std::cout << "üéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        std::cout << "
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:" << std::endl;
        std::cout << "- ‚öôÔ∏è  –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏" << std::endl;
        std::cout << "- üîç TransitionManager: –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤" << std::endl;
        std::cout << "- üìç StateManager: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏" << std::endl;
        std::cout << "- üìú TuringTape (LazySeq): –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ª–µ–Ω—Ç–∞ —Å –ª–µ–Ω–∏–≤—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏" << std::endl;
        std::cout << "- üîÑ HeadManager: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≤–∫–æ–π —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
