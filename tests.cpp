#include "MT.h"
#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <sstream>

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */
class TestFramework {
private:
    static int total_tests;
    static int passed_tests;
    
public:
    static void RunTest(const std::string& test_name, std::function<bool()> test_func) {
        total_tests++;
        std::cout << "[–¢–µ—Å—Ç] " << test_name << "... ";
        
        try {
            if (test_func()) {
                passed_tests++;
                std::cout << "PASS \u2713" << std::endl;
            } else {
                std::cout << "FAIL \u2717" << std::endl;
            }
        } catch (const std::exception& e) {
            std::cout << "ERROR: " << e.what() << std::endl;
        }
    }
    
    static void PrintSummary() {
        std::cout << std::endl << "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===" << std::endl;
        std::cout << "–ü—Ä–æ—à–ª–æ: " << passed_tests << "/" << total_tests << " —Ç–µ—Å—Ç–æ–≤" << std::endl;
        if (passed_tests == total_tests) {
            std::cout << "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ" << std::endl;
        } else {
            std::cout << "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ‚ùå" << std::endl;
        }
    }
};

int TestFramework::total_tests = 0;
int TestFramework::passed_tests = 0;

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—à–∏–Ω—ã
 */
bool TestMachineCreation() {
    MachineTuring<std::string, char> tm(' ', "q0");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (tm.GetCurrentState() != "q0") return false;
    if (tm.GetHeadPosition() != 0) return false;
    if (tm.GetStepCount() != 0) return false;
    if (tm.GetBlankSymbol() != ' ') return false;
    
    return true;
}

/**
 * –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å LazySeq (–ª–µ–Ω–∏–≤–∞—è –ª–µ–Ω—Ç–∞)
 */
bool TestLazySequenceTape() {
    MachineTuring<std::string, char> tm('_', "start");
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    std::vector<char> input = {'a', 'b', 'c'};
    tm.SetInput(input);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ –∏–∑ –ª–µ–Ω–∏–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (tm.GetSymbolAt(0) != 'a') return false;
    if (tm.GetSymbolAt(1) != 'b') return false;
    if (tm.GetSymbolAt(2) != 'c') return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    if (tm.GetSymbolAt(3) != '_') return false;  // LazySeq –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
    if (tm.GetSymbolAt(100) != '_') return false; // –î–∞–∂–µ –æ—á–µ–Ω—å –æ—Ç–¥–∞–ª—ë–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ª–µ–≤–∞—è —á–∞—Å—Ç—å –ª–µ–Ω—Ç—ã)
    if (tm.GetSymbolAt(-1) != '_') return false;
    if (tm.GetSymbolAt(-50) != '_') return false;
    
    return true;
}

/**
 * –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏)
 */
bool TestComponentSeparation() {
    MachineTuring<std::string, char> tm(' ', "q0");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º TransitionManager
    tm.AddRule("q0", 'a', "q1", 'b', Direction::RIGHT);
    tm.AddRule("q1", ' ', "q2", 'c', Direction::LEFT);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º StateManager
    tm.AddFinalState("q2");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º TuringTape (LazySeq)
    std::vector<char> input = {'a'};
    tm.SetInput(input);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (tm.GetCurrentState() != "q0") return false;
    if (tm.ReadCurrentSymbol() != 'a') return false;
    
    // –ü–µ—Ä–≤—ã–π —à–∞–≥: q0, 'a' -> q1, 'b', RIGHT
    bool step1 = tm.Step();
    if (!step1) return false;
    if (tm.GetCurrentState() != "q1") return false;
    if (tm.GetHeadPosition() != 1) return false;
    if (tm.GetSymbolAt(0) != 'b') return false;  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å
    
    // –í—Ç–æ—Ä–æ–π —à–∞–≥: q1, ' ' -> q2, 'c', LEFT
    bool step2 = tm.Step();
    if (!step2) return false;
    if (tm.GetCurrentState() != "q2") return false;
    if (tm.GetHeadPosition() != 0) return false;
    if (tm.GetSymbolAt(1) != 'c') return false;  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—à–∏–Ω–∞ –≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (!tm.IsInFinalState()) return false;
    
    return true;
}

/**
 * –¢–µ—Å—Ç –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∏–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –Ω–∞ LazySeq
 */
bool TestBinaryInverterLazy() {
    MachineTuring<std::string, char> tm(' ', "START");
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É
    tm.AddRule("START", '0', "START", '1', Direction::RIGHT);
    tm.AddRule("START", '1', "START", '0', Direction::RIGHT);
    tm.AddRule("START", ' ', "FINAL", ' ', Direction::STAY);
    tm.AddFinalState("FINAL");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –±–æ–ª—å—à–æ–π —Å—Ç—Ä–æ–∫–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LazySeq)
    std::vector<char> input;
    for (int i = 0; i < 100; ++i) {
        input.push_back((i % 2) ? '1' : '0');
    }
    
    tm.SetInput(input);
    
    bool success = tm.Run();
    if (!success) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Ä—Å–∏–∏
    auto result = tm.GetTapeSegment(0, input.size());
    for (size_t i = 0; i < input.size(); ++i) {
        char expected = (input[i] == '0') ? '1' : '0';
        if (result[i] != expected) return false;
    }
    
    return tm.IsInFinalState();
}

/**
 * –¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º
 */
bool TestStepLimit() {
    MachineTuring<std::string, char> tm(' ', "q0", 10);  // –õ–∏–º–∏—Ç 10 —à–∞–≥–æ–≤
    
    // –°–æ–∑–¥–∞—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    tm.AddRule("q0", ' ', "q0", ' ', Direction::RIGHT);
    
    std::vector<char> input;
    tm.SetInput(input);
    
    bool success = tm.Run();
    
    // –ú–∞—à–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ –ª–∏–º–∏—Ç—É —à–∞–≥–æ–≤
    if (tm.GetStepCount() != 10) return false;
    if (success) return false; // –ù–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    
    return true;
}

/**
 * –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –º–∞—à–∏–Ω—ã (–≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
 */
bool TestMachineReset() {
    MachineTuring<std::string, char> tm('_', "start");
    
    tm.AddRule("start", 'a', "middle", 'x', Direction::RIGHT);
    tm.AddRule("middle", '_', "end", 'y', Direction::LEFT);
    tm.AddFinalState("end");
    
    std::vector<char> input = {'a'};
    tm.SetInput(input);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
    tm.Step(); // start -> middle
    tm.Step(); // middle -> end
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—à–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (tm.GetCurrentState() == "start") return false;
    if (tm.GetStepCount() == 0) return false;
    if (tm.GetHeadPosition() == 0) return false;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º
    tm.Reset();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (tm.GetCurrentState() != "start") return false;  // StateManager
    if (tm.GetHeadPosition() != 0) return false;        // HeadManager
    if (tm.GetStepCount() != 0) return false;           // –°—á—ë—Ç—á–∏–∫
    if (tm.ReadCurrentSymbol() != '_') return false;    // TuringTape (–æ—á–∏—â–µ–Ω–∞)
    
    return true;
}

/**
 * –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
bool TestStatePersistence() {
    MachineTuring<std::string, char> tm(' ', "q0");
    
    tm.AddRule("q0", ' ', "q1", 'x', Direction::RIGHT);
    tm.AddFinalState("q1");
    
    std::vector<char> input;
    tm.SetInput(input);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    MachineTuring<std::string, char> tm_copy(tm);
    
    // –ò–∑–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    tm.Step();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (tm_copy.GetCurrentState() != "q0") return false;
    if (tm_copy.GetStepCount() != 0) return false;
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω
    if (tm.GetCurrentState() != "q1") return false;
    if (tm.GetStepCount() != 1) return false;
    
    return true;
}

/**
 * –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ LazySeq –Ω–∞ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
 */
bool TestLazySeqDistantAccess() {
    MachineTuring<std::string, int> tm(0, "q0");  // –ò—Å–ø–æ–ª—å–∑—É–µ–º int –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
    
    // –ú–∞–ª–µ–Ω—å–∫–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    std::vector<int> input = {1, 2, 3};
    tm.SetInput(input);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å LazySeq –Ω–∞ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    
    // –û—Ç–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—É—Å—Ç—ã–º —Å–∏–º–≤–æ–ª–æ–º
    if (tm.GetSymbolAt(1000) != 0) return false;
    if (tm.GetSymbolAt(10000) != 0) return false;
    
    // –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    if (tm.GetSymbolAt(0) != 1) return false;
    if (tm.GetSymbolAt(1) != 2) return false;
    if (tm.GetSymbolAt(2) != 3) return false;
    
    return true;
}

/**
 * –¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ª–µ–Ω—Ç—ã
 */
bool TestTapeSegments() {
    MachineTuring<std::string, char> tm('?', "q0");
    
    std::vector<char> input = {'A', 'B', 'C', 'D', 'E'};
    tm.SetInput(input, 2);  // –†–∞–∑–º–µ—â–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ 2
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    if (tm.GetSymbolAt(2) != 'A') return false;
    if (tm.GetSymbolAt(3) != 'B') return false;
    if (tm.GetSymbolAt(6) != 'E') return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    auto segment1 = tm.GetTapeSegment(0, 3);  // –ü—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if (segment1[0] != '?' || segment1[1] != '?' || segment1[2] != 'A') return false;
    
    auto segment2 = tm.GetTapeSegment(2, 5);  // –î–∞–Ω–Ω—ã–µ
    if (segment2[0] != 'A' || segment2[4] != 'E') return false;
    
    auto segment3 = tm.GetTapeSegment(10, 3); // –ü—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–ø—Ä–∞–≤–∞
    if (segment3[0] != '?' || segment3[2] != '?') return false;
    
    return true;
}

/**
 * –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
 */
bool TestNegativePositions() {
    MachineTuring<std::string, char> tm('#', "q0");
    
    tm.AddRule("q0", '#', "q1", 'X', Direction::LEFT);  // –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ
    tm.AddRule("q1", '#', "q2", 'Y', Direction::LEFT);  // –ï—â—ë –≤–ª–µ–≤–æ
    tm.AddFinalState("q2");
    
    std::vector<char> input;
    tm.SetInput(input);  // –ü—É—Å—Ç–∞—è –ª–µ–Ω—Ç–∞
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–≤–∞ —à–∞–≥–∞
    bool step1 = tm.Step();
    bool step2 = tm.Step();
    
    if (!step1 || !step2) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (tm.GetHeadPosition() != -2) return false;       // –ì–æ–ª–æ–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ -2
    if (!tm.IsInFinalState()) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è LazySeq
    if (tm.GetSymbolAt(-1) != '#') return false; // –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    
    return true;
}

/**
 * –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
bool TestExecutionStatistics() {
    MachineTuring<std::string, char> tm(' ', "q0");
    
    tm.AddRule("q0", ' ', "q1", 'a', Direction::RIGHT);
    tm.AddRule("q1", ' ', "q2", 'b', Direction::RIGHT);
    tm.AddRule("q2", ' ', "final", 'c', Direction::STAY);
    tm.AddFinalState("final");
    
    std::vector<char> input;
    tm.SetInput(input);
    
    auto start_time = std::chrono::high_resolution_clock::now();
    bool success = tm.Run();
    auto end_time = std::chrono::high_resolution_clock::now();
    
    if (!success) return false;
    if (tm.GetStepCount() != 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
    auto execution_time = tm.GetExecutionTime();
    if (execution_time.count() < 0) return false;  // –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    
    return true;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
int main() {
    std::cout << "üß™ –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ LazySeq" << std::endl;
    std::cout << "=================================================================" << std::endl;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    TestFramework::RunTest("üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã", TestMachineCreation);
    TestFramework::RunTest("üîç LazySeq –ª–µ–Ω—Ç–∞", TestLazySequenceTape);
    TestFramework::RunTest("‚öôÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", TestComponentSeparation);
    TestFramework::RunTest("üîÑ –ë–∏–Ω–∞—Ä–Ω—ã–π –∏–Ω–≤–µ—Ä—Ç–µ—Ä (LazySeq)", TestBinaryInverterLazy);
    TestFramework::RunTest("üö´ –õ–∏–º–∏—Ç —à–∞–≥–æ–≤", TestStepLimit);
    TestFramework::RunTest("üîÑ –°–±—Ä–æ—Å –º–∞—à–∏–Ω—ã", TestMachineReset);
    TestFramework::RunTest("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", TestStatePersistence);
    TestFramework::RunTest("üåå LazySeq –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø", TestLazySeqDistantAccess);
    TestFramework::RunTest("üì• –°–µ–≥–º–µ–Ω—Ç—ã –ª–µ–Ω—Ç—ã", TestTapeSegments);
    TestFramework::RunTest("‚û© –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", TestNegativePositions);
    TestFramework::RunTest("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", TestExecutionStatistics);
    
    TestFramework::PrintSummary();
    
    std::cout << std::endl << "üîç –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:" << std::endl;
    std::cout << "- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: TransitionManager, StateManager, TuringTape, HeadManager" << std::endl;
    std::cout << "- üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ LazySeq –Ω–∞ –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö" << std::endl;
    std::cout << "- üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è (–ª–∏–º–∏—Ç —à–∞–≥–æ–≤)" << std::endl;
    std::cout << "- ‚ôæÔ∏è –¢–µ—Å—Ç—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–ª–µ–≤–∞—è —á–∞—Å—Ç—å –ª–µ–Ω—Ç—ã)" << std::endl;
    
    return (TestFramework::total_tests == TestFramework::passed_tests) ? 0 : 1;
}
